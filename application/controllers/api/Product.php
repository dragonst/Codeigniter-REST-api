<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */
require APPPATH . '/libraries/REST_Controller.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Product extends \Restserver\Libraries\REST_Controller {


    function __construct()
    {
        // Construct the parent class
        parent::__construct();

        $this->load->model('product_model');
        $this->load->helper('url');
        $this->load->library('session');
    }


    public function index_get($id = null)
    {

      // Users from a data store e.g. database

      // If the id parameter doesn't exist return all the users

      if ($id === NULL)
      {

        if($this->get('page'))
        {
          $products = $this->product_model->get_paginated(($this->get('page') * 5) - 5 , 5);
        }
        else
        {
          $products = $this->product_model->get();
        }

          // Check if the users data store contains users (in case the database result returns NULL)
          if ($products)
          {

              // Set the response and exit
              $this->response($products, \Restserver\Libraries\REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
          }
          else
          {
              // Set the response and exit
              $this->response([
                  'status' => FALSE,
                  'message' => 'No products were found'
              ], \Restserver\Libraries\REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
          }
      }
      // Find and return a single record for a particular user.
      else {

          $id = (int) $id;

          // Validate the id.
          if ($id <= 0)
          {
              // Invalid id, set the response and exit.
              $this->response(NULL, \Restserver\Libraries\REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
          }

          // Get the user from the array, using the id as key for retrieval.
          // Usually a model is to be used for this.
          $product = $this->product_model->get($id);


          if (!empty($product))
          {
              $this->set_response($product, \Restserver\Libraries\REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
          }
          else
          {
              $this->set_response([
                  'status' => FALSE,
                  'message' => 'User could not be found'
              ], \Restserver\Libraries\REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
          }
      }
    }


    public function index_post()
    {
      if ( ! $this->session->userdata('user_logged'))
      {
          // Display an error response
          $this->response([
                  $this->config->item('rest_status_field_name') => FALSE,
                  $this->config->item('rest_message_field_name') => $this->lang->line('text_rest_unauthorized')
              ], self::HTTP_UNAUTHORIZED);
      }
      else{
          $id = $this->product_model->insert($this->input->post('data'));

         $message = [
              'id' => $id, // Automatically generated by the model
              'title' => $this->input->post('data')['title'],
              'price' => $this->input->post('data')['price'],
              'description' => $this->input->post('data')['description'],
              'success' => true
          ];

          $this->set_response($message, \Restserver\Libraries\REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
}
    }

  }
